
<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Banner Manager - NoMercy</title>
    <link rel="stylesheet" href="/navigation.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --card-bg: rgba(40, 40, 40, 0.8);
            --border-color: rgba(255, 255, 255, 0.1);
            --text-primary: #ffffff;
            --text-secondary: #9ca3af;
            --text-tertiary: #6b7280;
            --bg-secondary: rgba(30, 30, 30, 0.8);
        }

        body {
            background: linear-gradient(135deg, #1e1e1e 0%, #2a2a2a 100%);
            color: #ffffff;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }

        .main-content {
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
            min-height: 100vh;
        }

        .banner-manager-container {
            background: rgba(30, 30, 30, 0.95);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
        }

        /* Page Header */
        .page-header-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .header-content .page-title {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            background: linear-gradient(45deg, #6366f1, #8b5cf6);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .title-icon {
            font-size: 2rem;
        }

        .page-description {
            color: #9ca3af;
            font-size: 1rem;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
        }

        .btn-primary, .btn-secondary {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }

        .btn-primary {
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            color: #ffffff;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(99, 102, 241, 0.3);
        }

        .btn-secondary {
            background: rgba(107, 114, 128, 0.2);
            color: #9ca3af;
            border: 1px solid rgba(107, 114, 128, 0.3);
        }

        .btn-secondary:hover {
            background: rgba(107, 114, 128, 0.3);
            color: #ffffff;
        }

        /* Statistics Section */
        .stats-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: rgba(40, 40, 40, 0.8);
            border-radius: 16px;
            padding: 1.5rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            gap: 1rem;
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            background: rgba(50, 50, 50, 0.9);
        }

        .stat-icon {
            font-size: 2rem;
        }

        .stat-content {
            flex: 1;
        }

        .stat-label {
            color: #9ca3af;
            font-size: 0.875rem;
            margin-bottom: 0.25rem;
        }

        .stat-value {
            color: #ffffff;
            font-size: 1.5rem;
            font-weight: 700;
        }

        /* Filters Section */
        .filters-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .search-container {
            position: relative;
            flex: 1;
            max-width: 400px;
        }

        .search-input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 3rem;
            background: rgba(40, 40, 40, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            color: #ffffff;
            font-size: 0.875rem;
        }

        .search-input::placeholder {
            color: #9ca3af;
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #9ca3af;
        }

        .filter-controls {
            display: flex;
            gap: 1rem;
        }

        .filter-select {
            padding: 0.75rem 1rem;
            background: rgba(40, 40, 40, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            color: #ffffff;
            font-size: 0.875rem;
            cursor: pointer;
        }

        .filter-select option {
            background: #2a2a2a;
            color: #ffffff;
        }

        /* Content Section */
        .content-section {
            background: rgba(40, 40, 40, 0.6);
            border-radius: 16px;
            padding: 1.5rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .section-header h2 {
            font-size: 1.25rem;
            font-weight: 600;
            color: #ffffff;
        }

        .view-controls {
            display: flex;
            gap: 0.5rem;
        }

        .view-btn {
            padding: 0.5rem;
            background: rgba(107, 114, 128, 0.2);
            border: 1px solid rgba(107, 114, 128, 0.3);
            border-radius: 8px;
            color: #9ca3af;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .view-btn.active, .view-btn:hover {
            background: rgba(99, 102, 241, 0.2);
            border-color: rgba(99, 102, 241, 0.3);
            color: #8b5cf6;
        }

        /* Banner Grid */
        .banners-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            min-height: 200px;
        }

        .banner-item {
            background: var(--card-bg);
            border-radius: 12px;
            overflow: hidden;
            transition: all 0.3s ease;
            border: 1px solid var(--border-color);
        }

        .banner-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

        .banner-preview-container {
            position: relative;
            height: 120px;
            overflow: hidden;
        }

        .banner-image {
            width: 100%;
            height: 100%;
            object-fit: contain;
            background: rgba(0,0,0,0.1);
        }

        .banner-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .banner-item:hover .banner-overlay {
            opacity: 1;
        }

        .banner-actions {
            display: flex;
            gap: 8px;
        }

        .action-btn {
            padding: 8px;
            background: rgba(255, 255, 255, 0.1);
            border: none;
            border-radius: 6px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .action-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .edit-btn:hover {
            background: rgba(99, 102, 241, 0.3);
        }

        .delete-btn:hover {
            background: rgba(239, 68, 68, 0.3);
        }

        .banner-info {
            padding: 16px;
        }

        .banner-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .banner-name {
            font-size: 1rem;
            font-weight: 600;
            margin: 0;
            color: var(--text-primary);
        }

        .rarity-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .rarity-badge.common {
            background: rgba(107, 114, 128, 0.2);
            color: #9ca3af;
        }

        .rarity-badge.rare {
            background: rgba(34, 197, 94, 0.2);
            color: #10b981;
        }

        .rarity-badge.epic {
            background: rgba(168, 85, 247, 0.2);
            color: #a855f7;
        }

        .rarity-badge.legendary {
            background: rgba(251, 191, 36, 0.2);
            color: #fbbf24;
        }

        .banner-description {
            color: var(--text-secondary);
            font-size: 0.875rem;
            margin: 8px 0;
            line-height: 1.4;
        }

        .banner-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.75rem;
            color: var(--text-tertiary);
        }

        .banner-status.active {
            color: #10b981;
        }

        .banner-status.inactive {
            color: #ef4444;
        }

        .loading-spinner {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 3rem;
            color: var(--text-secondary);
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid rgba(255, 255, 255, 0.1);
            border-top: 3px solid #8b5cf6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 3rem;
            text-align: center;
            grid-column: 1 / -1;
        }

        .empty-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .empty-state h3 {
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }

        .empty-state p {
            color: var(--text-secondary);
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: var(--card-bg);
            border-radius: 16px;
            padding: 0;
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            border: 1px solid var(--border-color);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-color);
        }

        .modal-header h3 {
            margin: 0;
            color: var(--text-primary);
        }

        .modal-close {
            background: none;
            border: none;
            color: var(--text-secondary);
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .modal-close:hover {
            background: rgba(255, 255, 255, 0.1);
            color: var(--text-primary);
        }

        .modal-form {
            padding: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
            font-weight: 500;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 0.75rem;
            background: rgba(20, 20, 20, 0.8);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            color: var(--text-primary);
            font-size: 0.875rem;
        }

        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            outline: none;
            border-color: #8b5cf6;
            box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
        }

        .form-group textarea {
            resize: vertical;
            min-height: 80px;
        }

        .file-info {
            margin-top: 0.5rem;
        }

        .file-info small {
            color: var(--text-secondary);
            font-size: 0.75rem;
        }

        .banner-preview {
            margin-top: 16px;
        }

        .preview-container {
            border: 2px solid var(--border-color);
            border-radius: 8px;
            overflow: hidden;
            min-height: 80px;
            max-height: 200px;
            background: var(--bg-secondary);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .preview-container img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
            height: auto;
            width: auto;
        }

        .modal-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            padding-top: 1rem;
            border-top: 1px solid var(--border-color);
        }

        /* Notification Styles */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background: linear-gradient(135deg, #10b981, #059669);
        }

        .notification.error {
            background: linear-gradient(135deg, #ef4444, #dc2626);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .main-content {
                padding: 1rem;
            }

            .page-header-section {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .header-actions {
                width: 100%;
                justify-content: flex-start;
            }

            .stats-section {
                grid-template-columns: 1fr;
            }

            .filters-section {
                flex-direction: column;
                align-items: stretch;
            }

            .search-container {
                max-width: none;
            }

            .filter-controls {
                justify-content: flex-start;
            }

            .banners-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Include Navigation -->
    <%- include('partials/navigation', { currentPage: 'banners', user: user }) %>

    <main class="main-content">
        <div class="banner-manager-container">
            <!-- Page Header -->
            <div class="page-header-section">
                <div class="header-content">
                    <h1 class="page-title">
                        <span class="title-icon">🖼️</span>
                        Banner Manager
                    </h1>
                    <p class="page-description">Manage and organize profile banners for all users</p>
                </div>

                <!-- Quick Actions -->
                <div class="header-actions">
                    <button class="btn-primary" onclick="openAddBannerModal()">
                        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 5V19M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        Add New Banner
                    </button>
                    <button class="btn-secondary" onclick="refreshBanners()">
                        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M3 12A9 9 0 1 0 12 3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M3 3V9H9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        Refresh
                    </button>
                </div>
            </div>

            <!-- Statistics Section -->
            <div class="stats-section">
                <div class="stat-card">
                    <div class="stat-icon">📊</div>
                    <div class="stat-content">
                        <div class="stat-label">Total Banners</div>
                        <div class="stat-value" id="totalBanners">-</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">⭐</div>
                    <div class="stat-content">
                        <div class="stat-label">Legendary</div>
                        <div class="stat-value" id="legendaryCount">-</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">💎</div>
                    <div class="stat-content">
                        <div class="stat-label">Epic</div>
                        <div class="stat-value" id="epicCount">-</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">🔮</div>
                    <div class="stat-content">
                        <div class="stat-label">Rare</div>
                        <div class="stat-value" id="rareCount">-</div>
                    </div>
                </div>
            </div>

            <!-- Filters and Search -->
            <div class="filters-section">
                <div class="search-container">
                    <input type="text" id="searchInput" placeholder="Search banners..." class="search-input">
                    <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <circle cx="11" cy="11" r="8" stroke="currentColor" stroke-width="2"/>
                        <path d="m21 21-4.35-4.35" stroke="currentColor" stroke-width="2"/>
                    </svg>
                </div>

                <div class="filter-controls">
                    <select id="rarityFilter" class="filter-select">
                        <option value="">All Rarities</option>
                        <option value="common">Common</option>
                        <option value="rare">Rare</option>
                        <option value="epic">Epic</option>
                        <option value="legendary">Legendary</option>
                    </select>

                    <select id="statusFilter" class="filter-select">
                        <option value="">All Status</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                </div>
            </div>

            <!-- Banners Grid -->
            <div class="content-section">
                <div class="section-header">
                    <h2>Banners Collection</h2>
                    <div class="view-controls">
                        <button class="view-btn active" onclick="toggleView('grid')">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect x="3" y="3" width="7" height="7" stroke="currentColor" stroke-width="2"/>
                                <rect x="14" y="3" width="7" height="7" stroke="currentColor" stroke-width="2"/>
                                <rect x="3" y="14" width="7" height="7" stroke="currentColor" stroke-width="2"/>
                                <rect x="14" y="14" width="7" height="7" stroke="currentColor" stroke-width="2"/>
                            </svg>
                        </button>
                        <button class="view-btn" onclick="toggleView('list')">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <line x1="8" y1="6" x2="21" y2="6" stroke="currentColor" stroke-width="2"/>
                                <line x1="8" y1="12" x2="21" y2="12" stroke="currentColor" stroke-width="2"/>
                                <line x1="8" y1="18" x2="21" y2="18" stroke="currentColor" stroke-width="2"/>
                                <line x1="3" y1="6" x2="3.01" y2="6" stroke="currentColor" stroke-width="2"/>
                                <line x1="3" y1="12" x2="3.01" y2="12" stroke="currentColor" stroke-width="2"/>
                                <line x1="3" y1="18" x2="3.01" y2="18" stroke="currentColor" stroke-width="2"/>
                            </svg>
                        </button>
                    </div>
                </div>

                <div id="bannersGrid" class="banners-grid">
                    <!-- Banners will be loaded here dynamically -->
                </div>

                <div id="loadingSpinner" class="loading-spinner" style="display: none;">
                    <div class="spinner"></div>
                    <p>Loading banners...</p>
                </div>
            </div>
        </div>
    </main>

    <!-- Add Banner Modal -->
    <div id="addBannerModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Add New Banner</h3>
                <button class="modal-close" onclick="closeAddBannerModal()">&times;</button>
            </div>

            <form id="addBannerForm" class="modal-form">
                <div class="form-group">
                    <label for="bannerId">Banner ID</label>
                    <input type="text" id="bannerId" name="bannerId" required placeholder="e.g., cosmic-waves">
                </div>

                <div class="form-group">
                    <label for="bannerName">Banner Name</label>
                    <input type="text" id="bannerName" name="name" required placeholder="e.g., Cosmic Waves">
                </div>

                <div class="form-group">
                    <label for="bannerDescription">Description</label>
                    <textarea id="bannerDescription" name="description" placeholder="Brief description of the banner"></textarea>
                </div>

                <div class="form-group">
                    <label for="bannerRarity">Rarity</label>
                    <select id="bannerRarity" name="rarity" required>
                        <option value="common">Common</option>
                        <option value="rare">Rare</option>
                        <option value="epic">Epic</option>
                        <option value="legendary">Legendary</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="bannerFile">Banner Image</label>
                    <input type="file" id="bannerFile" accept="image/*,.gif" onchange="previewBanner(event)">
                    <div class="file-info">
                        <small>Supports PNG, JPG, SVG, and GIF (for animated banners). Original ratio will be preserved.</small>
                    </div>
                </div>

                <div id="bannerPreview" class="banner-preview" style="display: none;">
                    <label>Preview:</label>
                    <div class="preview-container">
                        <img id="previewImage" alt="Banner Preview">
                    </div>
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn-secondary" onclick="closeAddBannerModal()">Cancel</button>
                    <button type="submit" class="btn-primary">Add Banner</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Banner Modal -->
    <div id="editBannerModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Edit Banner</h3>
                <button class="modal-close" onclick="closeEditBannerModal()">&times;</button>
            </div>

            <form id="editBannerForm" class="modal-form">
                <input type="hidden" id="editBannerId" name="bannerId">

                <div class="form-group">
                    <label for="editBannerName">Banner Name</label>
                    <input type="text" id="editBannerName" name="name" required>
                </div>

                <div class="form-group">
                    <label for="editBannerDescription">Description</label>
                    <textarea id="editBannerDescription" name="description"></textarea>
                </div>

                <div class="form-group">
                    <label for="editBannerRarity">Rarity</label>
                    <select id="editBannerRarity" name="rarity" required>
                        <option value="common">Common</option>
                        <option value="rare">Rare</option>
                        <option value="epic">Epic</option>
                        <option value="legendary">Legendary</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="editBannerFile">Update Banner Image (Optional)</label>
                    <input type="file" id="editBannerFile" accept="image/*,.gif" onchange="previewEditBanner(event)">
                    <div class="file-info">
                        <small>Leave empty to keep current image. GIF supported for animated banners.</small>
                    </div>
                </div>

                <div id="editBannerPreview" class="banner-preview">
                    <label>Current:</label>
                    <div class="preview-container">
                        <img id="editPreviewImage" alt="Current Banner">
                    </div>
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn-secondary" onclick="closeEditBannerModal()">Cancel</button>
                    <button type="submit" class="btn-primary">Update Banner</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let currentBanners = [];
        let currentView = 'grid';

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Banner Manager initialized');
            loadBanners();
            setupEventListeners();
        });

        function setupEventListeners() {
            // Search functionality
            const searchInput = document.getElementById('searchInput');
            const rarityFilter = document.getElementById('rarityFilter');
            const statusFilter = document.getElementById('statusFilter');
            
            if (searchInput) searchInput.addEventListener('input', filterBanners);
            if (rarityFilter) rarityFilter.addEventListener('change', filterBanners);
            if (statusFilter) statusFilter.addEventListener('change', filterBanners);

            // Forms
            const addForm = document.getElementById('addBannerForm');
            const editForm = document.getElementById('editBannerForm');
            
            if (addForm) addForm.addEventListener('submit', handleAddBanner);
            if (editForm) editForm.addEventListener('submit', handleEditBanner);

            console.log('✅ Event listeners setup complete');
        }

        async function loadBanners() {
            try {
                console.log('🔄 Loading banners...');
                const loadingSpinner = document.getElementById('loadingSpinner');
                const bannersGrid = document.getElementById('bannersGrid');
                
                if (loadingSpinner) loadingSpinner.style.display = 'flex';
                if (bannersGrid) bannersGrid.style.display = 'none';

                const response = await fetch('/api/banners/all', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                console.log('📡 Response status:', response.status);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                console.log('📊 Received data:', data);

                if (data.success && Array.isArray(data.banners)) {
                    currentBanners = data.banners;
                    console.log('✅ Banners loaded:', currentBanners.length);
                    updateStatistics(currentBanners);
                    renderBanners(currentBanners);
                } else {
                    console.error('❌ API returned error:', data.message || 'No banners data');
                    showEmptyState('No banners available', 'No banners have been created yet.');
                    showNotification(data.message || 'Failed to load banners', 'error');
                }
            } catch (error) {
                console.error('❌ Error loading banners:', error);
                showNotification('Error loading banners: ' + error.message, 'error');
                showEmptyState('Failed to load banners', 'There was an error connecting to the server.');
            } finally {
                const loadingSpinner = document.getElementById('loadingSpinner');
                const bannersGrid = document.getElementById('bannersGrid');
                
                if (loadingSpinner) loadingSpinner.style.display = 'none';
                if (bannersGrid) bannersGrid.style.display = 'grid';
            }
        }

        function updateStatistics(banners) {
            if (!Array.isArray(banners)) {
                console.warn('⚠️ Invalid banners data for statistics');
                return;
            }

            const stats = {
                total: banners.length,
                legendary: banners.filter(b => b.rarity === 'legendary').length,
                epic: banners.filter(b => b.rarity === 'epic').length,
                rare: banners.filter(b => b.rarity === 'rare').length
            };

            const elements = {
                totalBanners: document.getElementById('totalBanners'),
                legendaryCount: document.getElementById('legendaryCount'),
                epicCount: document.getElementById('epicCount'),
                rareCount: document.getElementById('rareCount')
            };

            if (elements.totalBanners) elements.totalBanners.textContent = stats.total;
            if (elements.legendaryCount) elements.legendaryCount.textContent = stats.legendary;
            if (elements.epicCount) elements.epicCount.textContent = stats.epic;
            if (elements.rareCount) elements.rareCount.textContent = stats.rare;

            console.log('📊 Statistics updated:', stats);
        }

        function renderBanners(banners) {
            const container = document.getElementById('bannersGrid');
            if (!container) {
                console.error('❌ Banners grid container not found');
                return;
            }

            if (!Array.isArray(banners) || banners.length === 0) {
                showEmptyState('No banners found', 'No banners match your current filters.');
                return;
            }

            const bannersHTML = banners.map(banner => {
                const bannerData = banner._doc || banner;
                return `
                    <div class="banner-item" data-rarity="${bannerData.rarity}">
                        <div class="banner-preview-container">
                            <img src="${bannerData.imageUrl}" alt="${bannerData.name}" class="banner-image" loading="lazy" onerror="this.src='/banners/default-gradient.svg'">
                            <div class="banner-overlay">
                                <div class="banner-actions">
                                    <button class="action-btn edit-btn" onclick="openEditBannerModal('${bannerData.bannerId}')" title="Edit">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M11 4H4C3.46957 4 2.96086 4.21071 2.58579 4.58579C2.21071 4.96086 2 5.46957 2 6V20C2 20.5304 2.21071 21.0391 2.58579 21.4142C2.96086 21.7893 3.46957 22 4 22H18C18.5304 22 19.0391 21.7893 19.4142 21.4142C19.7893 21.0391 20 20.5304 20 20V13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            <path d="M18.5 2.50001C18.8978 2.10219 19.4374 1.87868 20 1.87868C20.5626 1.87868 21.1022 2.10219 21.5 2.50001C21.8978 2.89784 22.1213 3.4374 22.1213 4.00001C22.1213 4.56262 21.8978 5.10219 21.5 5.50001L12 15L8 16L9 12L18.5 2.50001Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                    </button>
                                    <button class="action-btn delete-btn" onclick="deleteBanner('${bannerData.bannerId}')" title="Delete">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M3 6H5H21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                            <path d="M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="banner-info">
                            <div class="banner-header">
                                <h3 class="banner-name">${bannerData.name}</h3>
                                <span class="rarity-badge ${bannerData.rarity}">${bannerData.rarity}</span>
                            </div>

                            <p class="banner-description">${bannerData.description || 'No description'}</p>

                            <div class="banner-meta">
                                <span class="banner-id">ID: ${bannerData.bannerId}</span>
                                <span class="banner-status ${bannerData.isActive !== false ? 'active' : 'inactive'}">
                                    ${bannerData.isActive !== false ? 'Active' : 'Inactive'}
                                </span>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');

            container.innerHTML = bannersHTML;
            console.log('✅ Banners rendered successfully:', banners.length);
        }

        function showEmptyState(title, description) {
            const container = document.getElementById('bannersGrid');
            if (!container) return;

            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">🖼️</div>
                    <h3>${title}</h3>
                    <p>${description}</p>
                    <button class="btn-secondary" onclick="loadBanners()" style="margin-top: 1rem;">Try Again</button>
                </div>
            `;
        }

        function filterBanners() {
            const searchInput = document.getElementById('searchInput');
            const rarityFilter = document.getElementById('rarityFilter');
            const statusFilter = document.getElementById('statusFilter');

            const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
            const rarityValue = rarityFilter ? rarityFilter.value : '';
            const statusValue = statusFilter ? statusFilter.value : '';

            const filteredBanners = currentBanners.filter(banner => {
                const bannerData = banner._doc || banner;
                
                const matchesSearch = !searchTerm || 
                    bannerData.name.toLowerCase().includes(searchTerm) || 
                    (bannerData.description && bannerData.description.toLowerCase().includes(searchTerm)) ||
                    bannerData.bannerId.toLowerCase().includes(searchTerm);

                const matchesRarity = !rarityValue || bannerData.rarity === rarityValue;
                
                const matchesStatus = !statusValue || 
                    (statusValue === 'active' && bannerData.isActive !== false) ||
                    (statusValue === 'inactive' && bannerData.isActive === false);

                return matchesSearch && matchesRarity && matchesStatus;
            });

            renderBanners(filteredBanners);
        }

        function toggleView(view) {
            currentView = view;
            const viewButtons = document.querySelectorAll('.view-btn');
            viewButtons.forEach(btn => btn.classList.remove('active'));
            
            const activeButton = document.querySelector(`[onclick="toggleView('${view}')"]`);
            if (activeButton) activeButton.classList.add('active');

            const container = document.getElementById('bannersGrid');
            if (container) {
                container.className = view === 'list' ? 'banners-grid list-view' : 'banners-grid';
            }

            renderBanners(currentBanners);
        }

        function openAddBannerModal() {
            const modal = document.getElementById('addBannerModal');
            const form = document.getElementById('addBannerForm');
            const preview = document.getElementById('bannerPreview');
            
            if (modal) modal.style.display = 'flex';
            if (form) form.reset();
            if (preview) preview.style.display = 'none';
        }

        function closeAddBannerModal() {
            const modal = document.getElementById('addBannerModal');
            if (modal) modal.style.display = 'none';
        }

        function openEditBannerModal(bannerId) {
            const banner = currentBanners.find(b => {
                const bannerData = b._doc || b;
                return bannerData.bannerId === bannerId;
            });
            
            if (!banner) {
                showNotification('Banner not found', 'error');
                return;
            }

            const bannerData = banner._doc || banner;
            
            const elements = {
                modal: document.getElementById('editBannerModal'),
                bannerId: document.getElementById('editBannerId'),
                name: document.getElementById('editBannerName'),
                description: document.getElementById('editBannerDescription'),
                rarity: document.getElementById('editBannerRarity'),
                preview: document.getElementById('editPreviewImage')
            };

            if (elements.bannerId) elements.bannerId.value = bannerData.bannerId;
            if (elements.name) elements.name.value = bannerData.name;
            if (elements.description) elements.description.value = bannerData.description || '';
            if (elements.rarity) elements.rarity.value = bannerData.rarity;
            if (elements.preview) elements.preview.src = bannerData.imageUrl;
            if (elements.modal) elements.modal.style.display = 'flex';
        }

        function closeEditBannerModal() {
            const modal = document.getElementById('editBannerModal');
            if (modal) modal.style.display = 'none';
        }

        function previewBanner(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.getElementById('previewImage');
                    const container = document.getElementById('bannerPreview');
                    
                    if (preview) preview.src = e.target.result;
                    if (container) container.style.display = 'block';
                };
                reader.readAsDataURL(file);
            }
        }

        function previewEditBanner(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.getElementById('editPreviewImage');
                    if (preview) preview.src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        }

        async function handleAddBanner(event) {
            event.preventDefault();

            try {
                const formData = new FormData(event.target);
                const fileInput = document.getElementById('bannerFile');

                if (fileInput && fileInput.files[0]) {
                    formData.append('bannerImage', fileInput.files[0]);
                }

                const response = await fetch('/api/banners/create', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showNotification('Banner added successfully!', 'success');
                    closeAddBannerModal();
                    loadBanners();
                } else {
                    showNotification(result.message || 'Failed to add banner', 'error');
                }
            } catch (error) {
                console.error('Error adding banner:', error);
                showNotification('Error adding banner: ' + error.message, 'error');
            }
        }

        async function handleEditBanner(event) {
            event.preventDefault();

            try {
                const formData = new FormData(event.target);
                const fileInput = document.getElementById('editBannerFile');

                if (fileInput && fileInput.files[0]) {
                    formData.append('bannerImage', fileInput.files[0]);
                }

                const bannerId = document.getElementById('editBannerId').value;

                const response = await fetch(`/api/banners/update/${bannerId}`, {
                    method: 'PUT',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showNotification('Banner updated successfully!', 'success');
                    closeEditBannerModal();
                    loadBanners();
                } else {
                    showNotification(result.message || 'Failed to update banner', 'error');
                }
            } catch (error) {
                console.error('Error updating banner:', error);
                showNotification('Error updating banner: ' + error.message, 'error');
            }
        }

        async function deleteBanner(bannerId) {
            if (!confirm('Are you sure you want to delete this banner?')) return;

            try {
                const response = await fetch(`/api/banners/delete/${bannerId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.success) {
                    showNotification('Banner deleted successfully!', 'success');
                    loadBanners();
                } else {
                    showNotification(result.message || 'Failed to delete banner', 'error');
                }
            } catch (error) {
                console.error('Error deleting banner:', error);
                showNotification('Error deleting banner: ' + error.message, 'error');
            }
        }

        function refreshBanners() {
            loadBanners();
        }

        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;

            document.body.appendChild(notification);

            setTimeout(() => notification.classList.add('show'), 100);

            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        // Click outside modal to close
        window.addEventListener('click', function(event) {
            const addModal = document.getElementById('addBannerModal');
            const editModal = document.getElementById('editBannerModal');
            
            if (event.target === addModal) {
                closeAddBannerModal();
            }
            if (event.target === editModal) {
                closeEditBannerModal();
            }
        });
    </script>
</body>
</html>
