<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Manager - NoMercy</title>
    <link rel="stylesheet" href="/navigation.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #1e1e1e 0%, #2a2a2a 100%);
            color: #ffffff;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }

        .user-manager-layout {
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
        }

        .header-section {
            background: rgba(40, 40, 40, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 2rem;
            margin-bottom: 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-title {
            font-size: 2rem;
            font-weight: 700;
            background: linear-gradient(45deg, #6366f1, #8b5cf6);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header-subtitle {
            color: #a0a0a0;
            font-size: 1rem;
            margin-top: 0.5rem;
        }

        .stats-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stats-card {
            background: rgba(40, 40, 40, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1.5rem;
            text-align: center;
        }

        .stats-number {
            font-size: 2rem;
            font-weight: 700;
            color: #6366f1;
            margin-bottom: 0.5rem;
        }

        .stats-label {
            color: #a0a0a0;
            font-size: 0.875rem;
        }

        .users-table-section {
            background: rgba(40, 40, 40, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            padding: 2rem;
        }

        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .table-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #ffffff;
        }

        .search-box {
            background: rgba(30, 30, 30, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 0.75rem 1rem;
            color: #ffffff;
            font-size: 0.875rem;
            width: 250px;
        }

        .search-box::placeholder {
            color: #a0a0a0;
        }

        .users-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        .users-table th,
        .users-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .users-table th {
            color: #6366f1;
            font-weight: 600;
            background: rgba(30, 30, 30, 0.5);
        }

        .users-table td {
            color: #ffffff;
        }

        .users-table tr:hover {
            background: rgba(99, 102, 241, 0.05);
        }

        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-owner {
            background: rgba(251, 191, 36, 0.2);
            color: #fbbf24;
        }

        .status-premium {
            background: rgba(139, 92, 246, 0.2);
            color: #8b5cf6;
        }

        .status-basic {
            background: rgba(107, 114, 128, 0.2);
            color: #6b7280;
        }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            font-size: 0.75rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-edit {
            background: rgba(59, 130, 246, 0.2);
            color: #3b82f6;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }

        .btn-edit:hover {
            background: rgba(59, 130, 246, 0.3);
        }

        .btn-delete {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .btn-delete:hover {
            background: rgba(239, 68, 68, 0.3);
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
        }

        .modal-content {
            background: rgba(40, 40, 40, 0.95);
            margin: 5% auto;
            padding: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            width: 90%;
            max-width: 500px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #ffffff;
        }

        .close {
            color: #a0a0a0;
            font-size: 1.5rem;
            font-weight: bold;
            cursor: pointer;
            border: none;
            background: none;
        }

        .close:hover {
            color: #ffffff;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            color: #a0a0a0;
            font-size: 0.875rem;
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .form-input,
        .form-select {
            width: 100%;
            padding: 0.75rem;
            background: rgba(30, 30, 30, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            color: #ffffff;
            font-size: 0.875rem;
        }

        .form-input::placeholder {
            color: #a0a0a0;
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
        }

        .btn-primary {
            background: #6366f1;
            color: #ffffff;
            border: none;
        }

        .btn-primary:hover {
            background: #5856eb;
        }

        .btn-secondary {
            background: transparent;
            color: #a0a0a0;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.05);
            color: #ffffff;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .user-manager-layout {
                padding: 1rem;
                padding-bottom: 120px;
            }

            .header-section {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }

            .users-table-section {
                overflow-x: auto;
            }

            .users-table {
                min-width: 800px;
            }

            .search-box {
                width: 100%;
                max-width: 250px;
            }
        }

        .mobile-bottom-padding {
            height: 80px;
        }
    </style>
</head>
<body>
    <%- include('partials/navigation', { currentPage: 'user-manager', user: user }) %>

    <main class="user-manager-layout">
        <!-- Header Section -->
        <div class="header-section">
            <div>
                <h1 class="header-title">User Manager</h1>
                <p class="header-subtitle">Kelola semua pengguna NoMercy</p>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="stats-cards">
            <div class="stats-card">
                <div class="stats-number" id="totalUsers">0</div>
                <div class="stats-label">Total Users</div>
            </div>
            <div class="stats-card">
                <div class="stats-number" id="ownerUsers">0</div>
                <div class="stats-label">Owner Users</div>
            </div>
            <div class="stats-card">
                <div class="stats-number" id="premiumUsers">0</div>
                <div class="stats-label">Premium Users</div>
            </div>
            <div class="stats-card">
                <div class="stats-number" id="basicUsers">0</div>
                <div class="stats-label">Basic Users</div>
            </div>
        </div>

        <!-- Users Table Section -->
        <div class="users-table-section">
            <div class="table-header">
                <h2 class="table-title">All Users</h2>
                <input type="text" class="search-box" id="searchInput" placeholder="Search users...">
            </div>

            <table class="users-table" id="usersTable">
                <thead>
                    <tr>
                        <th>Username</th>
                        <th>Phone</th>
                        <th>Status</th>
                        <th>Balance</th>
                        <th>Chips</th>
                        <th>Level</th>
                        <th>XP</th>
                        <th>Last Active</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="usersTableBody">
                    <!-- Users will be loaded here -->
                </tbody>
            </table>
        </div>
    </main>

    <!-- Edit User Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Edit User</h3>
                <button class="close" onclick="closeEditModal()">&times;</button>
            </div>

            <form id="editForm">
                <input type="hidden" id="editUserId">

                <div class="form-group">
                    <label class="form-label">Username</label>
                    <input type="text" class="form-input" id="editUsername" placeholder="Username">
                </div>

                <div class="form-group">
                    <label class="form-label">Status</label>
                    <select class="form-select" id="editStatus">
                        <option value="basic">Basic</option>
                        <option value="premium">Premium</option>
                        <option value="owner">Owner</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label">Balance</label>
                    <input type="number" class="form-input" id="editBalance" placeholder="Balance" min="0">
                </div>

                <div class="form-group">
                    <label class="form-label">Chips</label>
                    <input type="number" class="form-input" id="editChips" placeholder="Chips" min="0">
                </div>

                <div class="form-group">
                    <label class="form-label">Level</label>
                    <input type="number" class="form-input" id="editLevel" placeholder="Level" min="1">
                </div>

                <div class="form-group">
                    <label class="form-label">XP</label>
                    <input type="number" class="form-input" id="editXp" placeholder="XP" min="0">
                </div>

                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeEditModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Mobile bottom padding -->
    <div class="mobile-bottom-padding"></div>

    <script>
        let allUsers = [];
        let filteredUsers = [];

        // Load users on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadUsers();
        });

        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            filteredUsers = allUsers.filter(user => 
                user.username.toLowerCase().includes(searchTerm) ||
                user.phoneNumber.toLowerCase().includes(searchTerm) ||
                user.status.toLowerCase().includes(searchTerm)
            );
            renderUsersTable();
        });

        // Load all users
        async function loadUsers() {
            try {
                const response = await fetch('/api/users/all');
                const data = await response.json();

                if (data.success) {
                    allUsers = data.users;
                    filteredUsers = [...allUsers];
                    updateStats();
                    renderUsersTable();
                } else {
                    console.error('Failed to load users:', data.message);
                }
            } catch (error) {
                console.error('Error loading users:', error);
            }
        }

        // Update statistics
        function updateStats() {
            const totalUsers = allUsers.length;
            const ownerUsers = allUsers.filter(user => user.status === 'owner').length;
            const premiumUsers = allUsers.filter(user => user.status === 'premium').length;
            const basicUsers = allUsers.filter(user => user.status === 'basic').length;

            document.getElementById('totalUsers').textContent = totalUsers;
            document.getElementById('ownerUsers').textContent = ownerUsers;
            document.getElementById('premiumUsers').textContent = premiumUsers;
            document.getElementById('basicUsers').textContent = basicUsers;
        }

        // Calculate rank based on level using the same logic as config
        function getRankByLevel(level) {
            const ranks = [
                { name: 'Luminary', minLevel: 1, maxLevel: 15, color: '#fbbf24', icon: '⭐' },
                { name: 'Sage', minLevel: 16, maxLevel: 30, color: '#10b981', icon: '🌟' },
                { name: 'Visionary', minLevel: 31, maxLevel: 50, color: '#3b82f6', icon: '🔮' },
                { name: 'Guardian', minLevel: 51, maxLevel: 75, color: '#8b5cf6', icon: '🛡️' },
                { name: 'Mastermind', minLevel: 76, maxLevel: 100, color: '#f59e0b', icon: '🧠' },
                { name: 'Zenith', minLevel: 101, maxLevel: 129, color: '#ef4444', icon: '⚡' },
                { name: 'Celestial', minLevel: 130, maxLevel: 999, color: '#ec4899', icon: '👑' }
            ];

            for (const rank of ranks) {
                if (level >= rank.minLevel && level <= rank.maxLevel) {
                    return rank;
                }
            }
            return ranks[ranks.length - 1]; // Return highest rank if level exceeds all
        }

        // Render users table
        function renderUsersTable() {
            const tbody = document.getElementById('usersTableBody');
            tbody.innerHTML = '';

            filteredUsers.forEach(user => {
                const row = document.createElement('tr');

                const lastActive = new Date(user.lastActive).toLocaleDateString('id-ID');
                const phoneNumber = user.phoneNumber || user.userId.replace('@s.whatsapp.net', '');

                row.innerHTML = `
                    <td>${user.username}</td>
                    <td>${phoneNumber}</td>
                    <td><span class="status-badge status-${user.status}">${user.status}</span></td>
                    <td>${user.balance.toLocaleString()}</td>
                    <td>${user.chips.toLocaleString()}</td>
                    <td>${user.level}</td>
                    <td>${user.xp.toLocaleString()}</td>
                    <td>${lastActive}</td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn btn-edit" onclick="openEditModal('${user._id}')">Edit</button>
                            <button class="btn btn-delete" onclick="deleteUser('${user._id}', '${user.username}')">Delete</button>
                        </div>
                    </td>
                `;

                tbody.appendChild(row);
            });
        }

        let currentEditUserId = null;

        // Open edit modal
        function openEditModal(userId) {
            const user = allUsers.find(u => u._id === userId);
            if (!user) return;

            currentEditUserId = userId;

            document.getElementById('editUserId').value = user._id;
            document.getElementById('editUsername').value = user.username;
            document.getElementById('editStatus').value = user.status;
            document.getElementById('editBalance').value = user.balance;
            document.getElementById('editChips').value = user.chips;
            document.getElementById('editLevel').value = user.level;
            document.getElementById('editXp').value = user.xp;

            document.getElementById('editModal').style.display = 'block';
        }

        // Close edit modal
        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
        }

        // Handle edit form submission
        document.getElementById('editForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const userId = document.getElementById('editUserId').value;
            const updateData = {
                username: document.getElementById('editUsername').value,
                status: document.getElementById('editStatus').value,
                balance: parseInt(document.getElementById('editBalance').value) || 0,
                chips: parseInt(document.getElementById('editChips').value) || 0,
                level: parseInt(document.getElementById('editLevel').value) || 1,
                xp: parseInt(document.getElementById('editXp').value) || 0
            };

            try {
                const response = await fetch('/api/users/update', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ userId, updateData })
                });

                const data = await response.json();

                if (data.success) {
                    alert('User updated successfully!');
                    closeEditModal();

                    // Update the row in the table with new data
                    const row = document.querySelector(`tr[data-user-id="${currentEditUserId}"]`);
                    if (row && data.user) {
                        const levelCell = row.querySelector('td:nth-child(6)');
                        const xpCell = row.querySelector('td:nth-child(7)'); // Corrected index
                        const statusCell = row.querySelector('td:nth-child(3)');
                        const balanceCell = row.querySelector('td:nth-child(4)');
                        const chipsCell = row.querySelector('td:nth-child(5)');
                        const rank = getRankByLevel(data.user.level);

                        if (levelCell) levelCell.textContent = data.user.level;
                        if (xpCell) xpCell.textContent = data.user.xp.toLocaleString();
                        if (balanceCell) balanceCell.textContent = data.user.balance.toLocaleString();
                        if (chipsCell) chipsCell.textContent = data.user.chips.toLocaleString();

                        if (statusCell) {
                            statusCell.innerHTML = `<span class="status-badge status-${data.user.status}">${data.user.status}</span>`;
                        }
                    }
                    loadUsers();

                } else {
                    alert('Failed to update user: ' + data.message);
                }
            } catch (error) {
                console.error('Error updating user:', error);
                alert('Error updating user');
            }
        });

        // Delete user
        async function deleteUser(userId, username) {
            if (!confirm(`Are you sure you want to delete user "${username}"? This action cannot be undone.`)) {
                return;
            }

            try {
                const response = await fetch('/api/users/delete', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ userId })
                });

                const data = await response.json();

                if (data.success) {
                    alert('User deleted successfully!');
                    loadUsers(); // Reload users
                } else {
                    alert('Failed to delete user: ' + data.message);
                }
            } catch (error) {
                console.error('Error deleting user:', error);
                alert('Error deleting user');
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('editModal');
            if (event.target === modal) {
                closeEditModal();
            }
        }
    </script>
</body>
</html>