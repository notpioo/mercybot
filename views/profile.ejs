
<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile - NoMercy</title>
    <link rel="stylesheet" href="/styles.css">
    <link rel="stylesheet" href="/navigation.css">
    <link rel="stylesheet" href="/dashboard.css">
</head>
<body>
    <!-- Include Navigation -->
    <%- include('partials/navigation', { currentPage: 'profile', user: user }) %>

    <main class="main-content">
        <div class="profile-container">
            <!-- Profile Header Section -->
            <div class="profile-hero">
                <div class="profile-main-info">
                    <div class="avatar-section">
                        <div class="avatar-wrapper">
                            <% if (user && user.profilePhoto) { %>
                                <img src="<%= user.profilePhoto %>" alt="Profile Photo" class="profile-avatar">
                            <% } else { %>
                                <div class="profile-avatar default-avatar">
                                    <svg width="50" height="50" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M12 12C14.7614 12 17 9.76142 17 7C17 4.23858 14.7614 2 12 2C9.23858 2 7 4.23858 7 7C7 9.76142 9.23858 12 12 12Z" fill="white"/>
                                        <path d="M12 14C7.58172 14 4 17.5817 4 22H20C20 17.5817 16.4183 14 12 14Z" fill="white"/>
                                    </svg>
                                </div>
                            <% } %>
                        </div>

                        <div class="profile-identity">
                            <h1 class="username"><%= user ? user.username || 'User7572' : 'User7572' %></h1>
                            <p class="user-id">ID: <%= user ? user.userId.split('@')[0] : '6285709557572' %></p>

                            <div class="user-badges">
                                <% if (user) { %>
                                    <% if (user.status === 'owner') { %>
                                        <span class="status-badge owner-badge">Owner</span>
                                        <span class="rank-badge luminary-badge">‚≠ê Luminary</span>
                                    <% } else if (user.status === 'premium') { %>
                                        <span class="status-badge premium-badge">Premium</span>
                                        <span class="rank-badge luminary-badge">‚≠ê Luminary</span>
                                    <% } else { %>
                                        <span class="status-badge basic-badge">Basic</span>
                                        <span class="rank-badge luminary-badge">‚≠ê Luminary</span>
                                    <% } %>
                                <% } else { %>
                                    <span class="status-badge owner-badge">Owner</span>
                                    <span class="rank-badge luminary-badge">‚≠ê Luminary</span>
                                <% } %>
                            </div>
                        </div>

                        <div class="profile-menu-wrapper">
                            <div class="profile-menu-trigger" onclick="toggleProfileMenu()">
                                <div class="menu-dots">
                                    <div class="dot"></div>
                                    <div class="dot"></div>
                                    <div class="dot"></div>
                                </div>
                            </div>
                            <div class="profile-dropdown-menu" id="profileDropdown">
                                <div class="dropdown-item" onclick="openEditProfileModal()">
                                    <span class="dropdown-icon">‚úèÔ∏è</span>
                                    <span>Edit Profile</span>
                                </div>
                                <div class="dropdown-divider"></div>
                                <form action="/logout" method="POST" style="margin: 0;">
                                    <button type="submit" class="dropdown-item logout-btn">
                                        <span class="dropdown-icon">üö™</span>
                                        <span>Logout</span>
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Stats Grid -->
            <div class="stats-grid">
                <!-- Level Progress Card -->
                <div class="stat-card level-card">
                    <div class="card-header">
                        <div class="card-icon">‚ö°</div>
                        <h3>Level & Peringkat</h3>
                    </div>

                    <%
                        let xp = user ? user.xp || 0 : 0;
                        let totalXp = user ? user.totalXp || 0 : 0;
                        let level = user ? user.level || 1 : 1;
                        let xpRequired = Math.floor(50 + (level * 25) + (level ** 1.2 * 15));

                        // Get current rank dynamically
                        let currentRank = null;
                        if (user) {
                            const ranks = [
                                { name: 'Luminary', minLevel: 1, maxLevel: 15, color: '#fbbf24', icon: '‚≠ê' },
                                { name: 'Sage', minLevel: 16, maxLevel: 30, color: '#10b981', icon: 'üåü' },
                                { name: 'Visionary', minLevel: 31, maxLevel: 50, color: '#3b82f6', icon: 'üîÆ' },
                                { name: 'Guardian', minLevel: 51, maxLevel: 75, color: '#8b5cf6', icon: 'üõ°Ô∏è' },
                                { name: 'Mastermind', minLevel: 76, maxLevel: 100, color: '#f59e0b', icon: 'üß†' },
                                { name: 'Zenith', minLevel: 101, maxLevel: 129, color: '#ef4444', icon: '‚ö°' },
                                { name: 'Celestial', minLevel: 130, maxLevel: 999, color: '#ec4899', icon: 'üëë' }
                            ];
                            
                            for (const rank of ranks) {
                                if (level >= rank.minLevel && level <= rank.maxLevel) {
                                    currentRank = rank;
                                    break;
                                }
                            }
                            if (!currentRank) {
                                currentRank = ranks[ranks.length - 1]; // Default to highest rank
                            }
                        } else {
                            currentRank = { name: 'Luminary', icon: '‚≠ê' };
                        }
                    %>

                    <div class="level-showcase">
                        <div class="level-number-large"><%= level %></div>
                        <div class="rank-display">
                            <div class="rank-name"><%= currentRank.icon %> <%= currentRank.name %></div>
                        </div>
                    </div>

                    <div class="xp-progress-section">
                        <div class="xp-info">
                            <span class="current-xp"><%= xp %> XP</span>
                            <span class="required-xp"><%= xpRequired %> XP</span>
                        </div>
                        <div class="total-xp-obtained">
                            Total XP Diperoleh: <%= totalXp %>
                        </div>
                    </div>
                </div>

                <!-- Statistics Card -->
                <div class="stat-card statistics-card">
                    <div class="card-header">
                        <div class="card-icon">üìä</div>
                        <h3>Statistik Cepat</h3>
                    </div>

                    <div class="stats-grid-inner">
                        <div class="stat-item">
                            <div class="stat-icon">üí∞</div>
                            <div class="stat-info">
                                <div class="stat-label">Balance</div>
                                <div class="stat-value"><%= user ? user.balance : '50' %></div>
                            </div>
                        </div>

                        <div class="stat-item">
                            <div class="stat-icon">üéØ</div>
                            <div class="stat-info">
                                <div class="stat-label">Chips</div>
                                <div class="stat-value"><%= user ? user.chips || '0' : '0' %></div>
                            </div>
                        </div>

                        <div class="stat-item">
                            <div class="stat-icon">‚àû</div>
                            <div class="stat-info">
                                <div class="stat-label">Limit</div>
                                <div class="stat-value">
                                    <% if (user && (user.status === 'owner' || user.status === 'premium')) { %>
                                        ‚àû
                                    <% } else { %>
                                        <%= user ? user.limit : '50' %>
                                    <% } %>
                                </div>
                            </div>
                        </div>

                        <div class="stat-item">
                            <div class="stat-icon">‚≠ê</div>
                            <div class="stat-info">
                                <div class="stat-label">Status</div>
                                <div class="stat-value status-text <%= user ? user.status : 'owner' %>">
                                    <%= user ? (user.status === 'owner' ? 'Owner' : user.status === 'premium' ? 'Premium' : 'Basic') : 'Owner' %>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Activity Tabs -->
            <div class="activity-section">
                <div class="activity-tabs">
                    <button class="tab-button active">Aktivitas Terbaru</button>
                    <button class="tab-button">Prestasi</button>
                    <button class="tab-button">Lencana</button>
                </div>

                <div class="activity-content">
                    <div class="empty-state">
                        <div class="empty-icon">
                            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
                                <path d="m9 12 2 2 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </div>
                        <p>Belum ada aktivitas untuk ditampilkan</p>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <style>
        .profile-container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 2rem;
            min-height: 100vh;
            overflow-x: hidden;
        }

        /* Profile Hero Section */
        .profile-hero {
            background: rgba(30, 30, 30, 0.9);
            border-radius: 16px;
            padding: 2rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            width: 100%;
            box-sizing: border-box;
            overflow: hidden;
        }

        .avatar-section {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            position: relative;
            width: 100%;
            overflow: hidden;
        }

        .avatar-wrapper {
            flex-shrink: 0;
        }

        .profile-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: linear-gradient(135deg, #8b5cf6, #a855f7);
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            border: 3px solid rgba(255, 255, 255, 0.1);
        }

        .default-avatar {
            background: linear-gradient(135deg, #8b5cf6, #a855f7);
        }

        .profile-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .profile-identity {
            flex: 1;
            min-width: 0;
            overflow: hidden;
        }

        .username {
            font-size: 2rem;
            font-weight: 700;
            color: #ffffff;
            margin-bottom: 0.25rem;
            word-break: break-word;
            overflow-wrap: break-word;
        }

        .user-id {
            color: #9ca3af;
            font-size: 1rem;
            margin-bottom: 1rem;
            font-family: 'Courier New', monospace;
            word-break: break-all;
            overflow-wrap: break-word;
        }

        .user-badges {
            display: flex;
            gap: 0.75rem;
            flex-wrap: wrap;
            max-width: 100%;
        }

        .status-badge, .rank-badge {
            padding: 0.375rem 0.75rem;
            border-radius: 12px;
            font-size: 0.875rem;
            font-weight: 600;
            border: 1px solid transparent;
        }

        .owner-badge {
            background: #f59e0b;
            color: #000;
        }

        .premium-badge {
            background: #8b5cf6;
            color: #fff;
        }

        .basic-badge {
            background: #6b7280;
            color: #fff;
        }

        .luminary-badge {
            background: rgba(251, 191, 36, 0.2);
            color: #fbbf24;
            border-color: #fbbf24;
        }

        .profile-menu-wrapper {
            position: absolute;
            top: 1rem;
            right: 1rem;
            z-index: 1000;
        }

        .profile-menu-trigger {
            cursor: pointer;
            padding: 0.75rem;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(30, 30, 30, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(10px);
            width: 48px;
            height: 48px;
            transition: all 0.3s ease;
        }

        .profile-menu-trigger:hover {
            background: rgba(139, 92, 246, 0.2);
            border-color: rgba(139, 92, 246, 0.5);
            transform: scale(1.05);
        }

        .profile-menu-trigger:active {
            transform: scale(0.95);
        }

        .menu-dots {
            display: flex;
            flex-direction: column;
            gap: 3px;
            align-items: center;
        }

        .dot {
            width: 4px;
            height: 4px;
            background: #9ca3af;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .profile-menu-trigger:hover .dot {
            background: #a78bfa;
        }

        .profile-dropdown-menu {
            position: absolute;
            top: calc(100% + 0.75rem);
            right: 0;
            background: rgba(20, 20, 20, 0.98);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 16px;
            min-width: 200px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.9), 0 0 0 1px rgba(255, 255, 255, 0.05);
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px) scale(0.95);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            z-index: 2000;
            padding: 1rem;
            backdrop-filter: blur(30px);
        }

        .profile-dropdown-menu.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0) scale(1);
        }

        .dropdown-item {
            display: flex;
            align-items: center;
            gap: 0.875rem;
            color: #e5e5e5;
            text-decoration: none;
            padding: 1rem 1.25rem;
            border-radius: 12px;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            font-weight: 500;
            border: none;
            background: none;
            width: 100%;
            cursor: pointer;
            margin-bottom: 0.5rem;
        }

        .dropdown-item:hover {
            background: rgba(139, 92, 246, 0.15);
            color: #ffffff;
            transform: translateX(4px);
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.2);
        }

        .dropdown-item:last-child {
            margin-bottom: 0;
        }

        .logout-btn:hover {
            background: rgba(239, 68, 68, 0.15) !important;
            color: #ff6b6b !important;
            transform: translateX(4px) !important;
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.2) !important;
        }

        .dropdown-divider {
            height: 1px;
            background: rgba(255, 255, 255, 0.1);
            margin: 0.5rem 0;
        }

        .dropdown-icon {
            font-size: 1.1rem;
            width: 20px;
            text-align: center;
        }

        .logout-btn {
            background: none;
            border: none;
            width: 100%;
            text-align: left;
            cursor: pointer;
            font-family: inherit;
            font-size: inherit;
            color: inherit;
        }

        .logout-btn:focus {
            outline: none;
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
            width: 100%;
            box-sizing: border-box;
        }

        .stat-card {
            background: rgba(30, 30, 30, 0.9);
            border-radius: 16px;
            padding: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
        }

        .card-header {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1.5rem;
        }

        .card-icon {
            font-size: 1.5rem;
        }

        .card-header h3 {
            color: #ffffff;
            font-size: 1.125rem;
            font-weight: 600;
            margin: 0;
        }

        /* Level Card */
        .level-showcase {
            text-align: center;
            margin-bottom: 2rem;
        }

        .level-number-large {
            font-size: 4rem;
            font-weight: 900;
            color: #ffffff;
            line-height: 1;
            margin-bottom: 0.5rem;
        }

        .rank-name {
            font-size: 1.25rem;
            font-weight: 600;
            color: #fbbf24;
        }

        .xp-progress-section {
            text-align: center;
        }

        .xp-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
        }

        .current-xp {
            color: #ffffff;
            font-weight: 600;
        }

        .required-xp {
            color: #9ca3af;
        }

        .total-xp-obtained {
            color: #9ca3af;
            font-size: 0.875rem;
        }

        /* Statistics Card */
        .stats-grid-inner {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .stat-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 12px;
        }

        .stat-icon {
            font-size: 1.25rem;
            width: 32px;
            text-align: center;
        }

        .stat-info {
            flex: 1;
        }

        .stat-label {
            color: #9ca3af;
            font-size: 0.75rem;
            margin-bottom: 0.25rem;
        }

        .stat-value {
            color: #ffffff;
            font-size: 1.125rem;
            font-weight: 600;
        }

        .status-text.owner {
            color: #fbbf24;
        }

        .status-text.premium {
            color: #8b5cf6;
        }

        .status-text.basic {
            color: #6b7280;
        }

        /* Activity Section */
        .activity-section {
            background: rgba(30, 30, 30, 0.9);
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            overflow: hidden;
        }

        .activity-tabs {
            display: flex;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .tab-button {
            background: none;
            border: none;
            padding: 1rem 1.5rem;
            color: #9ca3af;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            border-bottom: 2px solid transparent;
        }

        .tab-button.active {
            color: #ffffff;
            border-bottom-color: #8b5cf6;
        }

        .tab-button:hover {
            color: #ffffff;
        }

        .activity-content {
            padding: 2rem;
        }

        .empty-state {
            text-align: center;
            padding: 2rem;
        }

        .empty-icon {
            color: #4b5563;
            margin-bottom: 1rem;
        }

        .empty-state p {
            color: #9ca3af;
            font-size: 0.875rem;
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .profile-container {
                padding: 1rem;
            }

            .stats-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .stats-grid-inner {
                grid-template-columns: 1fr;
            }

            .avatar-section {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }

            .profile-menu-wrapper {
                position: static;
                margin-top: 1rem;
                display: flex;
                justify-content: center;
            }

            .username {
                font-size: 1.5rem;
            }

            .level-number-large {
                font-size: 3rem;
            }

            .activity-tabs {
                flex-wrap: wrap;
            }

            .tab-button {
                flex: 1;
                min-width: 120px;
            }
        }

        /* Edit Profile Modal */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .modal-overlay.show {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            background: rgba(30, 30, 30, 0.95);
            border-radius: 20px;
            padding: 2rem;
            width: 90%;
            max-width: 500px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }

        .modal-overlay.show .modal-content {
            transform: scale(1);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .modal-title {
            color: #ffffff;
            font-size: 1.5rem;
            font-weight: 700;
            margin: 0;
        }

        .close-btn {
            background: none;
            border: none;
            color: #9ca3af;
            font-size: 1.5rem;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .close-btn:hover {
            color: #ffffff;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            color: #ffffff;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .form-input {
            width: 100%;
            padding: 0.75rem 1rem;
            background: rgba(40, 40, 40, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            color: #ffffff;
            font-size: 1rem;
            transition: border-color 0.3s ease;
            box-sizing: border-box;
        }

        .form-input:focus {
            outline: none;
            border-color: #8b5cf6;
        }

        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
            width: 100%;
        }

        .file-input {
            position: absolute;
            left: -9999px;
        }

        .file-input-label {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.75rem 1rem;
            background: rgba(139, 92, 246, 0.1);
            border: 1px solid #8b5cf6;
            border-radius: 8px;
            color: #8b5cf6;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
            box-sizing: border-box;
        }

        .file-input-label:hover {
            background: rgba(139, 92, 246, 0.2);
        }

        .modal-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-cancel {
            background: rgba(107, 114, 128, 0.2);
            color: #9ca3af;
        }

        .btn-cancel:hover {
            background: rgba(107, 114, 128, 0.3);
        }

        .btn-save {
            background: #8b5cf6;
            color: #ffffff;
        }

        .btn-save:hover {
            background: #7c3aed;
        }

        .btn-save:disabled {
            background: #6b7280;
            cursor: not-allowed;
        }

        .file-preview {
            margin-top: 0.5rem;
            color: #9ca3af;
            font-size: 0.875rem;
        }

        .preview-image {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            margin-top: 0.5rem;
            border: 2px solid rgba(255, 255, 255, 0.1);
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .profile-container {
                padding: 1rem;
            }

            .profile-hero {
                padding: 1.5rem;
                position: relative;
            }

            .avatar-section {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }

            .username {
                font-size: 1.5rem;
            }

            .user-id {
                font-size: 0.875rem;
                word-break: break-all;
            }

            .stats-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .stats-grid-inner {
                grid-template-columns: 1fr 1fr;
                gap: 1rem;
            }

            .stat-card {
                padding: 1rem;
            }

            .modal-content {
                width: 95%;
                padding: 1.5rem;
                margin: 1rem;
            }

            .modal-actions {
                flex-direction: column;
                gap: 0.75rem;
            }

            .btn {
                width: 100%;
                padding: 1rem;
            }

            .profile-menu-wrapper {
                top: 0.75rem;
                right: 0.75rem;
            }

            .profile-menu-trigger {
                width: 44px;
                height: 44px;
                padding: 0.625rem;
            }

            .profile-dropdown-menu {
                min-width: 180px;
                right: 0;
            }
        }

        @media (max-width: 480px) {
            .profile-container {
                padding: 0.5rem;
            }

            .profile-hero {
                padding: 1rem;
            }

            .username {
                font-size: 1.25rem;
            }

            .stats-grid-inner {
                grid-template-columns: 1fr;
                gap: 0.75rem;
            }

            .user-badges {
                justify-content: center;
            }

            .status-badge, .rank-badge {
                font-size: 0.75rem;
                padding: 0.25rem 0.5rem;
            }
        }
    </style>

    <!-- Edit Profile Modal -->
    <div class="modal-overlay" id="editProfileModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Edit Profile</h3>
                <button class="close-btn" onclick="closeEditProfileModal()">&times;</button>
            </div>
            
            <form id="editProfileForm" enctype="multipart/form-data">
                <div class="form-group">
                    <label class="form-label" for="editUsername">Username (Optional)</label>
                    <input type="text" id="editUsername" name="username" class="form-input" 
                           value="<%= user ? user.username : '' %>" placeholder="Enter new username or leave blank to keep current">
                </div>
                
                <div class="form-group">
                    <label class="form-label" for="editProfilePhoto">Profile Photo</label>
                    <div class="file-input-wrapper">
                        <input type="file" id="editProfilePhoto" name="profilePhoto" 
                               class="file-input" accept="image/*" onchange="previewImage(this)">
                        <label for="editProfilePhoto" class="file-input-label">
                            üì∑ Choose Photo
                        </label>
                    </div>
                    <div class="file-preview" id="filePreview"></div>
                    <img id="imagePreview" class="preview-image" style="display: none;">
                </div>
                
                <div class="modal-actions">
                    <button type="button" class="btn btn-cancel" onclick="closeEditProfileModal()">Cancel</button>
                    <button type="submit" class="btn btn-save">Save Changes</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let isProfileMenuOpen = false;

        function toggleProfileMenu() {
            const dropdown = document.getElementById('profileDropdown');
            const trigger = document.querySelector('.profile-menu-trigger');
            
            if (dropdown && trigger) {
                isProfileMenuOpen = !isProfileMenuOpen;
                
                if (isProfileMenuOpen) {
                    dropdown.classList.add('show');
                    trigger.style.background = 'rgba(139, 92, 246, 0.3)';
                    trigger.style.borderColor = 'rgba(139, 92, 246, 0.6)';
                    console.log('Profile menu opened');
                } else {
                    dropdown.classList.remove('show');
                    trigger.style.background = 'rgba(30, 30, 30, 0.8)';
                    trigger.style.borderColor = 'rgba(255, 255, 255, 0.2)';
                    console.log('Profile menu closed');
                }
            } else {
                console.error('Profile menu elements not found');
            }
        }

        function closeProfileMenu() {
            const dropdown = document.getElementById('profileDropdown');
            const trigger = document.querySelector('.profile-menu-trigger');
            
            if (dropdown && trigger) {
                isProfileMenuOpen = false;
                dropdown.classList.remove('show');
                trigger.style.background = 'rgba(30, 30, 30, 0.8)';
                trigger.style.borderColor = 'rgba(255, 255, 255, 0.2)';
            }
        }

        // Initialize profile menu functionality when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing profile menu...');
            
            const trigger = document.querySelector('.profile-menu-trigger');
            const dropdown = document.getElementById('profileDropdown');
            
            console.log('Menu trigger found:', !!trigger);
            console.log('Dropdown found:', !!dropdown);
            
            if (trigger && dropdown) {
                // Close dropdown when clicking outside
                document.addEventListener('click', function(event) {
                    const menuWrapper = document.querySelector('.profile-menu-wrapper');
                    if (menuWrapper && !menuWrapper.contains(event.target)) {
                        console.log('Clicked outside profile menu, closing...');
                        closeProfileMenu();
                    }
                });
                
                // Prevent dropdown from closing when clicking inside it
                dropdown.addEventListener('click', function(e) {
                    e.stopPropagation();
                });
                
                console.log('Profile menu functionality initialized successfully');
            } else {
                console.error('Failed to initialize profile menu - elements not found');
            }
        });

        function openEditProfileModal() {
            console.log('Opening edit profile modal...');
            const modal = document.getElementById('editProfileModal');
            if (modal) {
                modal.classList.add('show');
                console.log('Modal opened');
            } else {
                console.error('Modal not found');
            }
            
            // Close dropdown
            closeProfileMenu();
        }

        function closeEditProfileModal() {
            const modal = document.getElementById('editProfileModal');
            modal.classList.remove('show');
            
            // Reset form
            document.getElementById('editProfileForm').reset();
            document.getElementById('filePreview').innerHTML = '';
            document.getElementById('imagePreview').style.display = 'none';
            
            // Reset username field to current value
            const currentUsername = '<%= user ? user.username : "" %>';
            document.getElementById('editUsername').value = currentUsername;
        }

        function previewImage(input) {
            const preview = document.getElementById('imagePreview');
            const filePreview = document.getElementById('filePreview');
            
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                    filePreview.innerHTML = 'Selected: ' + input.files[0].name;
                };
                
                reader.readAsDataURL(input.files[0]);
            } else {
                preview.style.display = 'none';
                filePreview.innerHTML = '';
            }
        }

        // Handle form submission
        document.getElementById('editProfileForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData();
            const username = document.getElementById('editUsername').value;
            const photoFile = document.getElementById('editProfilePhoto').files[0];
            
            formData.append('username', username);
            if (photoFile) {
                formData.append('profilePhoto', photoFile);
            }
            
            const saveBtn = document.querySelector('.btn-save');
            saveBtn.disabled = true;
            saveBtn.textContent = 'Saving...';
            
            try {
                const response = await fetch('/api/profile/update', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Show success message
                    alert('Profile updated successfully!');
                    
                    // Reload page to show updated profile
                    window.location.reload();
                } else {
                    alert('Error updating profile: ' + result.message);
                }
            } catch (error) {
                console.error('Error updating profile:', error);
                alert('Error updating profile. Please try again.');
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = 'Save Changes';
            }
        });

        // Close modal when clicking outside
        document.getElementById('editProfileModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeEditProfileModal();
            }
        });
    </script>
</body>
</html>
