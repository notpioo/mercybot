
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Social - NoMercy</title>
    <link rel="stylesheet" href="/styles.css">
    <link rel="stylesheet" href="/navigation.css">
    <style>
        body {
            background: linear-gradient(135deg, #1e1e1e 0%, #2a2a2a 100%);
            color: #ffffff;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            margin: 0;
            padding: 0;
        }

        .social-layout {
            padding: 2rem;
            max-width: 800px;
            margin: 0 auto;
        }

        .social-header {
            background: rgba(40, 40, 40, 0.95);
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .social-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: #ffffff;
            margin-bottom: 0.5rem;
        }

        .social-subtitle {
            color: #a0a0a0;
            font-size: 1rem;
        }

        /* Social Navigation */
        .social-nav {
            background: rgba(40, 40, 40, 0.95);
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .social-nav-tabs {
            display: flex;
            gap: 1rem;
        }

        .social-nav-tab {
            padding: 0.75rem 1.5rem;
            background: rgba(30, 30, 30, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            color: #a0a0a0;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .social-nav-tab.active {
            background: linear-gradient(45deg, #6366f1, #8b5cf6);
            color: #ffffff;
            border-color: rgba(99, 102, 241, 0.5);
        }

        .social-nav-tab:hover:not(.active) {
            background: rgba(99, 102, 241, 0.1);
            color: #ffffff;
            border-color: rgba(99, 102, 241, 0.3);
        }

        /* Create Post Section */
        .create-post {
            background: rgba(40, 40, 40, 0.95);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
        }

        .create-post h3 {
            color: #ffffff;
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .post-form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .post-type-selector {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .type-button {
            padding: 0.5rem 1rem;
            border: 1px solid rgba(99, 102, 241, 0.3);
            background: rgba(99, 102, 241, 0.1);
            color: #a0a0a0;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .type-button.active,
        .type-button:hover {
            background: rgba(99, 102, 241, 0.3);
            color: #ffffff;
            border-color: rgba(99, 102, 241, 0.5);
        }

        .post-content {
            background: rgba(30, 30, 30, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 1rem;
            color: #ffffff;
            font-size: 1rem;
            resize: vertical;
            min-height: 100px;
        }

        .post-content:focus {
            outline: none;
            border-color: rgba(99, 102, 241, 0.5);
        }

        .file-upload-section {
            display: none;
        }

        .file-upload-area {
            border: 2px dashed rgba(99, 102, 241, 0.3);
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: rgba(30, 30, 30, 0.5);
        }

        .file-upload-area:hover {
            border-color: rgba(99, 102, 241, 0.5);
            background: rgba(99, 102, 241, 0.1);
        }

        .file-upload-area.dragover {
            border-color: rgba(99, 102, 241, 0.7);
            background: rgba(99, 102, 241, 0.2);
        }

        .upload-icon {
            font-size: 2rem;
            margin-bottom: 0.5rem;
            color: #6366f1;
        }

        .upload-text {
            color: #a0a0a0;
            margin-bottom: 0.5rem;
        }

        .file-input {
            display: none;
        }

        .file-preview {
            margin-top: 1rem;
            display: none;
        }

        .file-preview img,
        .file-preview video {
            max-width: 100%;
            max-height: 200px;
            border-radius: 8px;
        }

        .remove-file {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
            border: 1px solid rgba(239, 68, 68, 0.3);
            border-radius: 4px;
            padding: 0.25rem 0.5rem;
            cursor: pointer;
            margin-top: 0.5rem;
            font-size: 0.875rem;
        }

        .post-button {
            background: linear-gradient(45deg, #6366f1, #8b5cf6);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            align-self: flex-start;
        }

        .post-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(99, 102, 241, 0.3);
        }

        .post-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        /* Posts Feed */
        .posts-feed {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .post-item {
            background: rgba(40, 40, 40, 0.95);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 1.5rem;
            transition: all 0.3s ease;
            position: relative;
        }

        .post-item:hover {
            border-color: rgba(99, 102, 241, 0.3);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(99, 102, 241, 0.1);
        }

        .post-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
            position: relative;
        }

        .post-avatar {
            background: linear-gradient(45deg, #6366f1, #8b5cf6);
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            font-weight: 600;
        }

        .post-user-info {
            flex: 1;
        }

        .post-author {
            color: #ffffff;
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .post-time {
            color: #a0a0a0;
            font-size: 0.875rem;
        }

        .post-menu {
            position: absolute;
            top: 0;
            right: 0;
        }

        .post-menu-button {
            background: none;
            border: none;
            color: #a0a0a0;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 50%;
            transition: all 0.3s ease;
            font-size: 1.25rem;
        }

        .post-menu-button:hover {
            background: rgba(255, 255, 255, 0.1);
            color: #ffffff;
        }

        .post-menu-dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            background: rgba(30, 30, 30, 0.95);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 0.5rem;
            display: none;
            z-index: 1000;
            min-width: 150px;
            backdrop-filter: blur(10px);
        }

        .post-menu-dropdown.show {
            display: block;
        }

        .menu-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem;
            color: #a0a0a0;
            cursor: pointer;
            border-radius: 4px;
            transition: all 0.3s ease;
            font-size: 0.875rem;
        }

        .menu-item:hover {
            background: rgba(255, 255, 255, 0.1);
            color: #ffffff;
        }

        .menu-item.delete {
            color: #ef4444;
        }

        .menu-item.delete:hover {
            background: rgba(239, 68, 68, 0.1);
            color: #ef4444;
        }

        .post-type-badge {
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 500;
            text-transform: uppercase;
        }

        .type-text {
            background: rgba(34, 197, 94, 0.2);
            color: #22c55e;
        }

        .type-image {
            background: rgba(59, 130, 246, 0.2);
            color: #3b82f6;
        }

        .type-video {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
        }

        .post-content-display {
            color: #d1d5db;
            font-size: 1rem;
            line-height: 1.6;
            margin-bottom: 1rem;
            white-space: pre-line;
        }

        .post-media {
            margin-bottom: 1rem;
        }

        .post-media img {
            max-width: 100%;
            border-radius: 8px;
        }

        .post-media video {
            max-width: 100%;
            border-radius: 8px;
        }

        .post-actions {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding-top: 1rem;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .action-button {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background: none;
            border: none;
            color: #a0a0a0;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .action-button:hover {
            background: rgba(255, 255, 255, 0.1);
            color: #ffffff;
        }

        .action-button.liked {
            color: #ef4444;
        }

        .action-button.liked:hover {
            color: #dc2626;
        }

        /* Comments Section */
        .comments-section {
            margin-top: 1rem;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            padding-top: 1rem;
        }

        .comment-form {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .comment-input {
            flex: 1;
            background: rgba(30, 30, 30, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 0.5rem;
            color: #ffffff;
            font-size: 0.95rem;
        }

        .comment-input:focus {
            outline: none;
            border-color: rgba(99, 102, 241, 0.5);
        }

        .comment-button {
            background: rgba(99, 102, 241, 0.2);
            color: #6366f1;
            border: 1px solid rgba(99, 102, 241, 0.3);
            border-radius: 8px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .comment-button:hover {
            background: rgba(99, 102, 241, 0.3);
            color: #ffffff;
        }

        .comments-list {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .comment-item {
            display: flex;
            gap: 0.75rem;
        }

        .comment-avatar {
            background: linear-gradient(45deg, #8b5cf6, #ec4899);
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
            font-weight: 600;
            flex-shrink: 0;
        }

        .comment-content {
            flex: 1;
        }

        .comment-author {
            color: #ffffff;
            font-size: 0.875rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .comment-text {
            color: #d1d5db;
            font-size: 0.875rem;
            line-height: 1.4;
        }

        .comment-time {
            color: #a0a0a0;
            font-size: 0.75rem;
            margin-top: 0.25rem;
        }

        .empty-state {
            background: rgba(40, 40, 40, 0.95);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 3rem 2rem;
            text-align: center;
        }

        .empty-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .empty-title {
            color: #ffffff;
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .empty-description {
            color: #a0a0a0;
        }

        /* Mobile responsive adjustments */
        @media (max-width: 768px) {
            .social-layout {
                padding: 1rem;
                padding-bottom: 120px;
            }

            .post-type-selector {
                flex-wrap: wrap;
            }

            .post-actions {
                flex-wrap: wrap;
            }

            .social-nav-tabs {
                flex-direction: column;
                gap: 0.5rem;
            }
        }

        .mobile-bottom-padding {
            height: 80px;
        }

        /* Loading states */
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        .uploading {
            background: rgba(99, 102, 241, 0.1);
            border-color: rgba(99, 102, 241, 0.3);
        }
    </style>
</head>
<body>
    <%- include('partials/navigation', { currentPage: 'social', user: user }) %>

    <main class="social-layout">
        <div class="social-header">
            <h1 class="social-title">Social Feed</h1>
            <p class="social-subtitle">Bagikan momen dan interaksi dengan komunitas NoMercy</p>
        </div>

        <!-- Social Navigation -->
        <div class="social-nav">
            <div class="social-nav-tabs">
                <div class="social-nav-tab active" data-tab="feed">📰 Feed</div>
                <div class="social-nav-tab" data-tab="my-feed">👤 My Feed</div>
            </div>
        </div>

        <!-- Create Post Section -->
        <div class="create-post">
            <h3>Bagikan sesuatu</h3>
            <form class="post-form" id="createPostForm">
                <div class="post-type-selector">
                    <button type="button" class="type-button active" data-type="text">📝 Text</button>
                    <button type="button" class="type-button" data-type="image">🖼️ Foto</button>
                    <button type="button" class="type-button" data-type="video">🎥 Video</button>
                </div>
                
                <textarea 
                    class="post-content" 
                    id="postContent"
                    placeholder="Apa yang ada di pikiran Anda?"
                    required
                ></textarea>
                
                <div class="file-upload-section" id="fileUploadSection">
                    <div class="file-upload-area" id="fileUploadArea">
                        <div class="upload-icon">📁</div>
                        <div class="upload-text">Klik atau drag & drop file di sini</div>
                        <div style="font-size: 0.875rem; color: #666;">Maksimal 10MB</div>
                    </div>
                    <input type="file" class="file-input" id="fileInput" accept="image/*,video/*">
                    <div class="file-preview" id="filePreview">
                        <button type="button" class="remove-file" id="removeFile">Hapus File</button>
                    </div>
                </div>
                
                <button type="submit" class="post-button" id="postButton">
                    Posting
                </button>
            </form>
        </div>

        <!-- Posts Feed -->
        <div class="posts-feed" id="postsContainer">
            <!-- Posts will be loaded here -->
        </div>
    </main>

    <div class="mobile-bottom-padding"></div>

    <script>
        let currentTab = 'feed';
        let selectedFile = null;
        let allPosts = [];
        let myPosts = [];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadPosts();
            initializeEventListeners();
        });

        function initializeEventListeners() {
            // Tab switching
            document.querySelectorAll('.social-nav-tab').forEach(tab => {
                tab.addEventListener('click', function() {
                    switchTab(this.dataset.tab);
                });
            });

            // Post type selector
            document.querySelectorAll('.type-button').forEach(button => {
                button.addEventListener('click', function() {
                    document.querySelectorAll('.type-button').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    
                    const type = this.dataset.type;
                    const fileSection = document.getElementById('fileUploadSection');
                    
                    if (type === 'image' || type === 'video') {
                        fileSection.style.display = 'block';
                        document.getElementById('fileInput').accept = type === 'image' ? 'image/*' : 'video/*';
                    } else {
                        fileSection.style.display = 'none';
                        selectedFile = null;
                        document.getElementById('filePreview').style.display = 'none';
                    }
                });
            });

            // File upload
            const fileUploadArea = document.getElementById('fileUploadArea');
            const fileInput = document.getElementById('fileInput');
            const filePreview = document.getElementById('filePreview');
            const removeFileBtn = document.getElementById('removeFile');

            fileUploadArea.addEventListener('click', () => fileInput.click());
            fileUploadArea.addEventListener('dragover', handleDragOver);
            fileUploadArea.addEventListener('drop', handleDrop);
            fileInput.addEventListener('change', handleFileSelect);
            removeFileBtn.addEventListener('click', removeFile);

            // Form submission
            document.getElementById('createPostForm').addEventListener('submit', handlePostSubmit);

            // Click outside to close menus
            document.addEventListener('click', function(e) {
                if (!e.target.closest('.post-menu')) {
                    document.querySelectorAll('.post-menu-dropdown').forEach(menu => {
                        menu.classList.remove('show');
                    });
                }
            });
        }

        function switchTab(tab) {
            currentTab = tab;
            
            // Update active tab
            document.querySelectorAll('.social-nav-tab').forEach(t => t.classList.remove('active'));
            document.querySelector(`[data-tab="${tab}"]`).classList.add('active');
            
            // Display posts based on tab
            displayPosts();
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.currentTarget.classList.add('dragover');
        }

        function handleDrop(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                handleFile(files[0]);
            }
        }

        function handleFileSelect(e) {
            if (e.target.files.length > 0) {
                handleFile(e.target.files[0]);
            }
        }

        function handleFile(file) {
            if (file.size > 10 * 1024 * 1024) {
                alert('File terlalu besar! Maksimal 10MB');
                return;
            }

            selectedFile = file;
            const filePreview = document.getElementById('filePreview');
            
            filePreview.innerHTML = '<button type="button" class="remove-file" id="removeFile">Hapus File</button>';
            
            if (file.type.startsWith('image/')) {
                const img = document.createElement('img');
                img.src = URL.createObjectURL(file);
                filePreview.insertBefore(img, filePreview.firstChild);
            } else if (file.type.startsWith('video/')) {
                const video = document.createElement('video');
                video.src = URL.createObjectURL(file);
                video.controls = true;
                filePreview.insertBefore(video, filePreview.firstChild);
            }
            
            filePreview.style.display = 'block';
            
            // Re-attach remove file event
            document.getElementById('removeFile').addEventListener('click', removeFile);
        }

        function removeFile() {
            selectedFile = null;
            document.getElementById('filePreview').style.display = 'none';
            document.getElementById('fileInput').value = '';
        }

        async function handlePostSubmit(e) {
            e.preventDefault();
            
            const postButton = document.getElementById('postButton');
            const content = document.getElementById('postContent').value.trim();
            const type = document.querySelector('.type-button.active').dataset.type;
            
            if (!content) {
                alert('Konten tidak boleh kosong!');
                return;
            }
            
            if ((type === 'image' || type === 'video') && !selectedFile) {
                alert('File media diperlukan untuk postingan foto/video!');
                return;
            }
            
            postButton.disabled = true;
            postButton.textContent = 'Memposting...';
            
            try {
                let mediaUrl = '';
                
                if (selectedFile) {
                    // Upload file first
                    const formData = new FormData();
                    formData.append('file', selectedFile);
                    
                    const uploadResponse = await fetch('/api/upload', {
                        method: 'POST',
                        body: formData
                    });
                    
                    const uploadResult = await uploadResponse.json();
                    
                    if (uploadResult.success) {
                        mediaUrl = uploadResult.fileUrl;
                    } else {
                        throw new Error(uploadResult.message || 'Failed to upload file');
                    }
                }
                
                const response = await fetch('/api/posts/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        type: type,
                        content: content,
                        mediaUrl: mediaUrl
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Reset form
                    document.getElementById('postContent').value = '';
                    removeFile();
                    
                    // Reload posts
                    await loadPosts();
                } else {
                    alert('Gagal membuat postingan: ' + result.message);
                }
            } catch (error) {
                console.error('Error creating post:', error);
                alert('Terjadi kesalahan saat membuat postingan');
            } finally {
                postButton.disabled = false;
                postButton.textContent = 'Posting';
            }
        }

        async function loadPosts() {
            try {
                const response = await fetch('/api/posts/all');
                const result = await response.json();
                
                if (result.success) {
                    allPosts = result.posts || [];
                    
                    // Filter my posts
                    const currentUserId = '<%= user ? user.userId : "" %>';
                    myPosts = allPosts.filter(post => post.userId === currentUserId);
                    
                    displayPosts();
                }
            } catch (error) {
                console.error('Error loading posts:', error);
            }
        }

        function displayPosts() {
            const container = document.getElementById('postsContainer');
            const posts = currentTab === 'my-feed' ? myPosts : allPosts;
            
            if (posts.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">📱</div>
                        <h3 class="empty-title">Belum Ada Postingan</h3>
                        <p class="empty-description">
                            ${currentTab === 'my-feed' ? 'Anda belum memposting apapun.' : 'Jadilah yang pertama untuk berbagi momen di komunitas NoMercy!'}
                        </p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = posts.map(post => createPostHTML(post)).join('');
            
            // Attach event listeners to new elements
            attachPostEventListeners();
        }

        function createPostHTML(post) {
            const currentUserId = '<%= user ? user.userId : "" %>';
            const isMyPost = post.userId === currentUserId;
            
            const formatDate = (dateString) => {
                const date = new Date(dateString);
                if (isNaN(date.getTime())) {
                    return 'Tanggal tidak valid';
                }
                const options = { 
                    year: 'numeric', 
                    month: 'short', 
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    timeZone: 'Asia/Jakarta',
                    hour12: false
                };
                return date.toLocaleDateString('id-ID', options);
            };
            
            return `
                <div class="post-item" data-post-id="${post._id}">
                    <div class="post-header">
                        <div class="post-avatar">
                            ${post.author.charAt(0).toUpperCase()}
                        </div>
                        <div class="post-user-info">
                            <div class="post-author">${post.author}</div>
                            <div class="post-time">${formatDate(post.createdAt)}</div>
                        </div>
                        <div class="post-type-badge type-${post.type}">
                            ${post.type}
                        </div>
                        <div class="post-menu">
                            <button class="post-menu-button" onclick="togglePostMenu('${post._id}')">⋯</button>
                            <div class="post-menu-dropdown" id="menu-${post._id}">
                                ${post.mediaUrl ? `
                                    <div class="menu-item" onclick="downloadMedia('${post.mediaUrl}', '${post.type}')">
                                        📥 Download
                                    </div>
                                ` : ''}
                                ${isMyPost ? `
                                    <div class="menu-item delete" onclick="deletePost('${post._id}')">
                                        🗑️ Hapus
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                    
                    <div class="post-content-display">
                        ${post.content}
                    </div>
                    
                    ${post.mediaUrl && post.type === 'image' ? `
                        <div class="post-media">
                            <img src="${post.mediaUrl}" alt="Post image" loading="lazy">
                        </div>
                    ` : ''}
                    
                    ${post.mediaUrl && post.type === 'video' ? `
                        <div class="post-media">
                            <video controls>
                                <source src="${post.mediaUrl}" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                        </div>
                    ` : ''}
                    
                    <div class="post-actions">
                        <button class="action-button like-button" data-post-id="${post._id}">
                            ❤️ <span class="likes-count">${post.likes ? post.likes.length : 0}</span>
                        </button>
                        <button class="action-button comment-button" data-post-id="${post._id}">
                            💬 <span class="comments-count">${post.comments ? post.comments.length : 0}</span>
                        </button>
                    </div>
                    
                    <div class="comments-section" style="display: none;">
                        <div class="comment-form">
                            <input 
                                type="text" 
                                class="comment-input" 
                                placeholder="Tulis komentar..."
                                data-post-id="${post._id}"
                            >
                            <button class="comment-button" data-post-id="${post._id}">
                                Kirim
                            </button>
                        </div>
                        
                        <div class="comments-list">
                            ${post.comments && post.comments.length > 0 ? post.comments.map(comment => `
                                <div class="comment-item">
                                    <div class="comment-avatar">
                                        ${comment.author.charAt(0).toUpperCase()}
                                    </div>
                                    <div class="comment-content">
                                        <div class="comment-author">${comment.author}</div>
                                        <div class="comment-text">${comment.content}</div>
                                        <div class="comment-time">${formatDate(comment.timestamp)}</div>
                                    </div>
                                </div>
                            `).join('') : ''}
                        </div>
                    </div>
                </div>
            `;
        }

        function attachPostEventListeners() {
            // Like buttons
            document.querySelectorAll('.like-button').forEach(button => {
                button.addEventListener('click', async function() {
                    const postId = this.dataset.postId;
                    const isLiked = this.classList.contains('liked');
                    
                    try {
                        const response = await fetch(isLiked ? '/api/posts/unlike' : '/api/posts/like', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ postId: postId })
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            this.classList.toggle('liked');
                            this.querySelector('.likes-count').textContent = result.likesCount || 0;
                        } else {
                            alert('Gagal: ' + result.message);
                        }
                    } catch (error) {
                        console.error('Error toggling like:', error);
                        alert('Terjadi kesalahan');
                    }
                });
            });

            // Comment buttons
            document.querySelectorAll('.comment-button').forEach(button => {
                if (button.closest('.post-actions')) {
                    button.addEventListener('click', function() {
                        const postItem = this.closest('.post-item');
                        const commentsSection = postItem.querySelector('.comments-section');
                        
                        if (commentsSection.style.display === 'none') {
                            commentsSection.style.display = 'block';
                        } else {
                            commentsSection.style.display = 'none';
                        }
                    });
                } else if (button.closest('.comment-form')) {
                    button.addEventListener('click', async function() {
                        const postId = this.dataset.postId;
                        const commentInput = this.parentElement.querySelector('.comment-input');
                        const content = commentInput.value.trim();
                        
                        if (!content) {
                            alert('Komentar tidak boleh kosong!');
                            return;
                        }
                        
                        try {
                            const response = await fetch('/api/posts/comment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    postId: postId,
                                    content: content
                                })
                            });
                            
                            const result = await response.json();
                            
                            if (result.success) {
                                commentInput.value = '';
                                // Update comments count
                                const commentsCountElement = document.querySelector(`button[data-post-id="${postId}"] .comments-count`);
                                if (commentsCountElement) {
                                    commentsCountElement.textContent = result.commentsCount || 0;
                                }
                                // Reload to show new comment
                                await loadPosts();
                            } else {
                                alert('Gagal menambah komentar: ' + result.message);
                            }
                        } catch (error) {
                            console.error('Error adding comment:', error);
                            alert('Terjadi kesalahan saat menambah komentar');
                        }
                    });
                }
            });
        }

        function togglePostMenu(postId) {
            const menu = document.getElementById(`menu-${postId}`);
            menu.classList.toggle('show');
        }

        function downloadMedia(mediaUrl, type) {
            const link = document.createElement('a');
            link.href = mediaUrl;
            link.download = `post-${type}-${Date.now()}`;
            link.target = '_blank';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        async function deletePost(postId) {
            if (!confirm('Apakah Anda yakin ingin menghapus postingan ini?')) {
                return;
            }
            
            try {
                const response = await fetch('/api/posts/delete', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ postId: postId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    await loadPosts();
                } else {
                    alert('Gagal menghapus postingan: ' + result.message);
                }
            } catch (error) {
                console.error('Error deleting post:', error);
                alert('Terjadi kesalahan saat menghapus postingan');
            }
        }
    </script>
</body>
</html>
